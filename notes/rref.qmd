---
format: html
title: Row Reduction Algorithm 
author: Jeremy Teitelbaum
---

```{python}
# | echo: false
import numpy as np
from sympy import Matrix, pprint


def row_reduce(matrix):
    steps = ""
    A = np.array(matrix, dtype=float)
    numRows, numCols = A.shape
    pivotRow = 0

    for col in range(numCols):
        if pivotRow >= numRows:
            break
        pivotFound = False
        for row in range(pivotRow, numRows):
            if A[row, col] != 0:
                pivotFound = True
                steps = f"Found pivot in column {col} and row {row}\n"
                if row != pivotRow:
                    A[[pivotRow, row]] = A[[row, pivotRow]]  # Swap rows
                    steps = f"Swap row {pivotRow} with row {row}\n"
                    print(steps)
                    pprint(Matrix(A))
                    input("Press Enter to continue...")

                # Normalize the pivot row
                pivot = A[pivotRow, col]
                A[pivotRow] = A[pivotRow] / pivot
                steps = f"Normalize pivot row {pivotRow}\n"
                print(steps)
                pprint(Matrix(A))
                #input("Press Enter to continue...")

                # Eliminate all other elements in the current column
                steps = f"Eliminate non-pivot entries in column {col}\n"
                for i in range(numRows):
                    if i != pivotRow:
                        factor = A[i, col]
                        A[i] = A[i] - factor * A[pivotRow]
                print(steps)
                pprint(Matrix(A))
                #input("Press Enter to continue...")

                pivotRow += 1  # Move to the next row for the next pivot
                break  # Move to the next column

        if not pivotFound:
            steps = f"No pivot found in column {col}, move to next column\n"
            print(steps)
            pprint(Matrix(A))
            #input("Press Enter to continue...")

    return A


# Example usage:
matrix = [[2, 1, -1, -1, 5], [4, 2, 1, 1, 1], [-2, -1, 3, 1, 5]]
print("\n--Input Matrix--")
pprint(Matrix(matrix))
reduced_matrix = row_reduce(matrix)
print("\n--Reduced Matrix--")
pprint(Matrix(reduced_matrix))
```